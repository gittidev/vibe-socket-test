name: CI

on:
  push:
    branches: [ main, master, staging ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install workspaces
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Build all workspaces
        run: npm run build

  docker:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image (monorepo)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}/patient-realtime:latest
            ghcr.io/${{ github.repository }}/patient-realtime:${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker
    # Temporarily disabled; set to true to re-enable
    if: ${{ false }}
    environment: staging
    steps:
      - name: Compute image tag
        id: img
        run: |
          echo "tag=ghcr.io/${{ github.repository }}/patient-realtime:staging" >> $GITHUB_OUTPUT
      - name: Build and push staging tag
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            VITE_API_BASE=${{ vars.VITE_API_BASE || 'http://localhost:3000' }}
          tags: ${{ steps.img.outputs.tag }}
      - name: SSH deploy to staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ steps.img.outputs.tag }}
            docker rm -f patient-realtime || true
            docker run -d --name patient-realtime --restart unless-stopped -p 3000:3000 ${{ steps.img.outputs.tag }}

  deploy-prod:
    runs-on: ubuntu-latest
    needs: docker
    # Temporarily disabled; set to true to re-enable
    if: ${{ false }}
    environment: production
    steps:
      - name: Compute image tag
        id: img
        run: |
          echo "tag=ghcr.io/${{ github.repository }}/patient-realtime:prod" >> $GITHUB_OUTPUT
      - name: Retag and push prod from latest build
        run: |
          echo "Login to GHCR"
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ghcr.io/${{ github.repository }}/patient-realtime:latest
          docker tag ghcr.io/${{ github.repository }}/patient-realtime:latest ${{ steps.img.outputs.tag }}
          docker push ${{ steps.img.outputs.tag }}
      - name: SSH deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_DEPLOY_HOST }}
          username: ${{ secrets.PROD_DEPLOY_USER }}
          key: ${{ secrets.PROD_DEPLOY_KEY }}
          port: ${{ secrets.PROD_DEPLOY_PORT || 22 }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ steps.img.outputs.tag }}
            docker rm -f patient-realtime || true
            docker run -d --name patient-realtime --restart unless-stopped -p 3000:3000 ${{ steps.img.outputs.tag }}
